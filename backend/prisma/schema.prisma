// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model File {
  id          Int      @id @default(autoincrement())
  image       String
  buffer      Bytes?
  size        String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt @map("updated_at")
}

model User {
  id          Int     @id @default(autoincrement())
  name        String?
  email       String?
  address     String?

  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt @map("updated_at")
}

model Post {
  id          Int @id @default(autoincrement())
  title       String
  content     String?
  image       String?

  author      Register @relation(fields: [author_Id] , references: [id])
  author_Id   Int

  category    Category @relation(fields: [category_id] , references: [id])
  category_id Int 

  comment Comment[]

  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt @map("updated_at")
}

model Category {
  id          Int @id @default(autoincrement())
  categories  String?

  post        Post[]

  // post         Post @relation(fields: [category_id] , references: [id])
  // category_id  Int @unique

  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt @map("updated_at")
}

model Comment {
  id    Int @id @default(autoincrement())
  comment String

  post Post @relation(fields: [post_id], references: [id])
  post_id  Int


  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt @map("updated_at")
}


model Register {
  id         Int    @id @default(autoincrement())
  name       String?
  email      String?
  password   String?
  address    String?

  post       Post[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt @map("updated_at")
}
























model basic_pay {
  id         Int     @id @default(autoincrement())
  employeeId Int
  amount     Int?
  name       String?
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt @map("updated_at")
}

model deduction {
  id         Int     @id @default(autoincrement())
  employeeId Int
  amount     Int?
  email      String?
  address    String?
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt @map("updated_at")
}



